*cakephp.txt* 

cakephp.vim -- a plugin for navigating and managing CakePHP applications with vim

Author: Nick Reynolds   |   ndreynolds [AT] gmail [DOT] com
License: Public Domain

This documentation covers the first release.  I'm hoping to add a lot more features as I 
learn more about vim-script and find the time. Currently, it offers modest support for 
navigating between models, views, and controllers. A few of the options mentioned may not 
be available, but I'll be adding them in version 1.1. 

INTRODUCTION                                                         *cakephp-introduction*
===========================================================================================

Developers that use vim with Ruby on Rails have a great plugin called vim-rails by Tim
Pope. The plugin offers comprehensive methods for creating, managing, and navigating
Rails applications. Users can browse the logs, docs, and even fire up a preview url.
This project aims to bring some--and with any luck, all--of these features to CakePHP
users, the framework I use at work.

When I first got the idea, I realized there was already a cake.vim plugin. Although 
it works as advertised, I was hoping for more automatic functionality.  I didn't want
to have to set any environment variables. Moreover, it only has a small percentage of
the functionality that vim-rails provides. With that in mind, I set about writing this
plugin, cakephp.vim, from scratch, with some inspiration from vim-rails.

INSTALLATION                                                         *cakephp-installation* 
===========================================================================================

You should probably be using Pathogen to manage your plugins. If not, why not grab it from
github.com/tpope/vim-pathogen. Using Pathogen, you'll just need to drop the whole plugin
in the $VIMRUNTIME/bundle directory. 

If you use the default scheme, put cakephp.txt in $VIMRUNTIME/doc and cakephp.vim in
$VIMRUNTIME/plugin.

USE                                                                           *cakephp-use*
===========================================================================================

When you use the plugin's methods from an open buffer that's a CakePHP controller file,
model file, or view file, the plugin will automatically build the MVC associations.

If you're not in a model, view, or controller, you'll currently get a warning stating just 
that. The reason for this is that the plugin cannot otherwise build the MVC associations. 
In the next release, I'm hoping to make this more flexible, so that things like :Clog or 
:Cconf are possible.

The premise for this functionality is that you're using the proper name conventions. For
example, if your model is called 'post.php', your controller should be 
'posts_controller.php' and your views should be located under 'views/posts'.

The plugin pluralizes and singularizes these filenames as necessary to build the
associations. If you have a buffer with 'posts_controller.php' open, the associations
will look something like this:

    model       => models/post.php
    controller  => controllers/posts_controller.php
    views       => views/posts/

If you want to see them, the development command :Cassoc will output these associations.

There are some irregular nouns where you'll get some unexpected results 
(e.g. louse => lice). The plurals it generates in these cases may or may not be the same 
as what Cake itself generates. For these, you'll just have to manage them manually. Worst 
case scenario, cakephp.vim opens a new file representing a controller with the wrong 
plural. Quit the buffer and no harm is done.


COMMANDS                                                                 *cakephp-commands*
===========================================================================================


NAVIGATION                                                    *cakephp-navigation-commands*
-------------------------------------------------------------------------------------------
Navigation commands can be augmented with 'S' or 'V' to open the file in a split or
vertically split window, respectively. (ex. :CVcontroller or :CSmodel). With the navigation
commands, 'associated' refers to the related MVC elements (e.g. 'post.php' & 
'posts_controller.php'). 'Specified' refers to the command arguments which tell the plugin 
to get a specific file.

                                                                      *cakephp:Ccontroller*
:Ccontroller                Opens the associated controller as a buffer. 

:Ccontroller [{name}]       Opens the specified controller. Same as the previous command,
                            but opens the controller given as an argument. The named 
                            controller need not be associated with the current buffer. You
                            can supply either the singular or plural form of the MVC 
                            element. 

                                EXAMPLE | :Ccontroller users
                                        | :Ccontroller user

                                                                           *cakephp:Cmodel*
:Cmodel                     Opens the associated model. 

:Cmodel [{name}]            Open the specified model. The same name conventions as 
                            :Ccontroller above apply. Although there's no good reason to 
                            refer to the model in plural, the command will accept either
                            form.

                                EXAMPLE | :Cmodel user
                                        | :Cmodel users

                                                                            *cakephp:Cview*
:Cview                      Opens a file browser buffer in the associated views directory.
                            This allows you to open one of these views using the file 
                            browser.

:Cview [{name}]             Opens the specified view. This command works two ways. If you
                            only provide a view name like 'index' or 'add', it will open 
                            the file in the associated views directory. Alternatively, you 
                            can specify the controller that it belongs to, and the view in
                            that controller's associated views directory will be opened.
                            Suppose we are editing 'posts_controller.php':

                                EXAMPLE | :Cmodel index      --Opens views/posts/index.ctp
                                        | :Cmodel users/add  --Opens views/users/add.ctp

                                                                             *cakephp:Ccss*
:Ccss                       Opens the file browser buffer in webroot/css.

:Ccss [{name}]              Opens the specified stylesheet from within webroot/css. You
                            do not need to supply the extension.
                                
                                EXAMPLE | :Ccss style   --Opens webroot/css/style.css

                                                                              *cakephp:Cjs*
:Cjs                        Opens the file browser buffer in webroot/js.

:Cjs [{name}]               Opens the specified script from within webroot/js. You do not 
                            need to supply the extension.
                                
                                EXAMPLE | :Cjs jquery   --Opens webroot/js/jquery.js


DOCUMENTATION                                              *cakephp-documentation-commands*
-------------------------------------------------------------------------------------------

                                                                             *cakephp:Cdoc*
:Cdoc [{query}]             Points the default browser to api.cakephp.org, showing either
                            the index page, or the results of the query argument, if 
                            supplied. This feature is still a bit experimental. It uses the
                            shell's 'open' command. Should work on Windows, Mac, and *nixes
                            with gnome-open installed. It's probably worth reminding that
                            this won't work when you're developing on a remote server over 
                            SSH, as the browser would (try to) open on that machine, NOT on 
                            your client machine.

                                EXAMPLE | :Cdoc Email Component   --Pulls up search results

DEBUGGING
-------------------------------------------------------------------------------------------

                                                                            *cakephp:Casoc*
:Cassoc                     Outputs the associations it was able to build. If the plugin
                            tries to open a path you don't expect, you can see what it was
                            thinking.
